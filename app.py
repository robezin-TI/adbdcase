import streamlit as st
from pymongo import MongoClient
import pandas as pd
import plotly.express as px
from datetime import datetime
import logging
import os
from dotenv import load_dotenv

# Configura√ß√£o de seguran√ßa
load_dotenv()  # Carrega credenciais do .env

if not st.session_state.get('logged_in'):
    st.set_page_config(layout="centered")  # Configura√ß√£o tempor√°ria para o login
    
    with st.form("login_form"):
        st.title("üîí Painel E-Shop - Acesso Restrito")
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        
        if st.form_submit_button("Entrar"):
            if (username == os.getenv("LOGIN_USERNAME") and 
                (password == os.getenv("LOGIN_PASSWORD")):
                st.session_state.logged_in = True
                st.rerun()
            else:
                st.error("Credenciais inv√°lidas")
    
    st.info("‚ÑπÔ∏è Use as credenciais fornecidas pelo administrador")
    st.stop()  # Bloqueia o resto do aplicativo

# Restaura a configura√ß√£o original da p√°gina
st.set_page_config(page_title="E-Shop Analytics", layout="wide")

# Configura√ß√£o b√°sica de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# T√≠tulo da aplica√ß√£o
st.title("üìä E-Shop Brasil - Painel de Dados")

# Conex√£o com o MongoDB
@st.cache_resource
def init_connection():
    try:
        client = MongoClient("mongodb://admin:password@mongodb:27017/eshop?authSource=admin")
        client.server_info()  # Testa a conex√£o
        logger.info("Conex√£o com MongoDB estabelecida")
        return client
    except Exception as e:
        logger.error(f"Erro na conex√£o: {str(e)}")
        st.error(f"‚ö†Ô∏è Falha na conex√£o com o banco de dados: {str(e)}")
        return None

client = init_connection()
db = client.eshop if client else None

# Fun√ß√£o para carregar dados
def load_data():
    try:
        data = list(db.vendas.find({}))
        if not data:
            st.warning("Nenhum dado encontrado no banco de dados")
            return None
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")
        return None

# Menu principal
option = st.sidebar.selectbox(
    "Menu",
    ["Importar Dados", "Visualizar Dados", "An√°lise de Clientes", "Otimiza√ß√£o Log√≠stica"],
    index=0
)

# Bot√£o de logout (novo)
if st.sidebar.button("üîí Sair"):
    st.session_state.logged_in = False
    st.rerun()

if option == "Importar Dados":
    st.header("üì§ Importa√ß√£o de Dados")
    uploaded_file = st.file_uploader("Selecione o arquivo CSV", type=["csv"])
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
            # Pr√©-processamento
            df.columns = df.columns.str.strip()
            if 'Data' in df.columns:
                df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
            
            st.subheader("Pr√©-visualiza√ß√£o dos Dados")
            st.dataframe(df.head(3))
            
            if st.button("Confirmar Importa√ß√£o"):
                if db is None:
                    st.error("Banco de dados n√£o conectado")
                else:
                    with st.spinner("Importando..."):
                        try:
                            # Convers√£o de tipos
                            numeric_cols = ['Quantidade', 'Pre√ßo Unit√°rio (R$)', 'Pre√ßo Total (R$)']
                            for col in numeric_cols:
                                if col in df.columns:
                                    df[col] = pd.to_numeric(df[col], errors='coerce')
                            
                            # Remove linhas com dados inv√°lidos
                            df_clean = df.dropna()
                            
                            # Insere no MongoDB
                            db.vendas.delete_many({})
                            result = db.vendas.insert_many(df_clean.to_dict('records'))
                            
                            st.success(f"""
                            ‚úÖ Importa√ß√£o conclu√≠da!
                            - Registros importados: {len(result.inserted_ids)}
                            - Registros ignorados (dados inv√°lidos): {len(df) - len(df_clean)}
                            """)
                        except Exception as e:
                            st.error(f"Erro durante a importa√ß√£o: {str(e)}")
                            logger.exception("Erro na importa√ß√£o")
                        
        except Exception as e:
            st.error(f"Erro ao ler arquivo: {str(e)}")
            logger.exception("Erro no processamento do CSV")

elif option == "Visualizar Dados":
    st.header("üìã Dados Armazenados")
    df = load_data()
    if df is not None:
        st.dataframe(df)
        st.download_button(
            label="Exportar como CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name='dados_exportados.csv',
            mime='text/csv'
        )

elif option == "An√°lise de Clientes":
    st.header("üë• An√°lise de Clientes")
    df = load_data()
    if df is not None:
        # M√©tricas principais
        col1, col2, col3 = st.columns(3)
        col1.metric("Total Clientes", df['ID Cliente'].nunique())
        col2.metric("Cidades Atendidas", df['Cidade'].nunique())
        col3.metric("Ticket M√©dio", f"R$ {df['Pre√ßo Total (R$)'].mean():.2f}")
        
        # Top clientes
        st.subheader("üèÜ Top 10 Clientes")
        top_clientes = df.groupby('Nome do Cliente').agg({
            'Pre√ßo Total (R$)': 'sum',
            'Quantidade': 'sum',
            'Cidade': 'first'
        }).nlargest(10, 'Pre√ßo Total (R$)')
        st.dataframe(top_clientes)

elif option == "Otimiza√ß√£o Log√≠stica":
    st.header("üöö Otimiza√ß√£o Log√≠stica")
    df = load_data()
    if df is not None:
        st.subheader("üìå Entregas por Regi√£o")
        cidade_stats = df.groupby('Cidade').agg({
            'Quantidade': 'sum',
            'ID Cliente': 'nunique'
        }).sort_values('Quantidade', ascending=False)
        
        fig = px.bar(
            cidade_stats.reset_index(),
            x='Cidade',
            y='Quantidade',
            color='ID Cliente',
            title='Volume de Entregas por Cidade'
        )
        st.plotly_chart(fig, use_container_width=True)
