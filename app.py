# Todas as importa√ß√µes primeiro
import streamlit as st
from pymongo import MongoClient
import pandas as pd
import plotly.express as px
import pydeck as pdk
import hashlib
import logging
import time
import os

# =============================================
# CONFIGURA√á√ÉO DA P√ÅGINA - DEVE SER O PRIMEIRO COMANDO STREAMLIT
# =============================================
st.set_page_config(
    page_title="E-Shop Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================
# CONFIGURA√á√ïES INICIAIS (AP√ìS A CONFIG DA P√ÅGINA)
# =============================================

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Credenciais fixas (apenas para desenvolvimento)
LOGIN = "adminfecaf"
PASSWORD = "fecafadbd"

# =============================================
# CONEX√ÉO COM BANCO DE DADOS
# =============================================

@st.cache_resource
def init_connection():
    try:
        client = MongoClient(
            "mongodb://admin:password@eshop-mongodb:27017/eshop?authSource=admin",
            serverSelectionTimeoutMS=5000,
            socketTimeoutMS=30000,
            connectTimeoutMS=30000,
            retryWrites=True
        )
        client.admin.command('ping')
        return client
    except Exception as e:
        st.error("Erro na conex√£o com o banco de dados")
        logger.error(f"Erro MongoDB: {str(e)}")
        return None

client = init_connection()
db = client.eshop if client else None

# =============================================
# FUN√á√ïES DE MANIPULA√á√ÉO DE DADOS
# =============================================

def salvar_no_banco(df):
    """Salva DataFrame no MongoDB com tratamento de erros"""
    try:
        records = df.to_dict('records')
        result = db.vendas.insert_many(records)
        return len(result.inserted_ids)
    except Exception as e:
        st.error(f"Erro ao salvar no banco: {str(e)}")
        logger.error(f"Erro ao salvar dados: {str(e)}")
        return 0

def carregar_vendas():
    """Carrega dados de vendas do MongoDB"""
    try:
        data = list(db.vendas.find({}))
        return pd.DataFrame(data) if data else pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar vendas: {str(e)}")
        return pd.DataFrame()

def carregar_clientes():
    """Carrega e processa dados de clientes"""
    try:
        pipeline = [
            {
                "$group": {
                    "_id": "$Cliente",
                    "TotalGasto": {"$sum": "$Pre√ßo Total"},
                    "Cidade": {"$first": "$Cidade"},
                    "QuantidadeCompras": {"$sum": 1}
                }
            },
            {"$sort": {"TotalGasto": -1}}
        ]
        clientes = list(db.vendas.aggregate(pipeline))
        return pd.DataFrame(clientes) if clientes else pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar clientes: {str(e)}")
        return pd.DataFrame()

# =============================================
# P√ÅGINA DE LOGIN
# =============================================

def login_page():
    """Tela de login robusta"""
    st.title("üîí Login - Painel E-Shop Brasil")
    st.markdown("---")
    
    with st.form("login_form"):
        login = st.text_input("Usu√°rio", key="login_field")
        password = st.text_input("Senha", type="password", key="pass_field")
        
        if st.form_submit_button("Acessar Sistema"):
            if login == LOGIN and password == PASSWORD:
                st.session_state.logged_in = True
                st.rerun()
            else:
                st.error("Credenciais inv√°lidas")
    
    st.markdown("---")

# =============================================
# FUN√á√ïES DAS ABAS
# =============================================

def aba_upload():
    """Interface para upload de arquivos com persist√™ncia real"""
    st.header("üì§ Importar Dados")
    
    uploaded_file = st.file_uploader(
        "Selecione o arquivo CSV", 
        type=["csv"],
        accept_multiple_files=False
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
            # Pr√©-processamento
            if 'Data' in df.columns:
                df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
            if all(col in df.columns for col in ['Quantidade', 'Pre√ßo Unit√°rio']):
                df['Pre√ßo Total'] = df['Quantidade'] * df['Pre√ßo Unit√°rio']
            
            with st.expander("Pr√©-visualiza√ß√£o (10 primeiras linhas)"):
                st.dataframe(df.head(10))
                
            if st.button("Salvar no Banco de Dados"):
                with st.spinner("Salvando dados..."):
                    qtd = salvar_no_banco(df)
                    if qtd > 0:
                        st.success(f"{qtd} registros salvos com sucesso!")
                        st.cache_data.clear()
                    else:
                        st.error("Nenhum dado foi salvo")
                        
        except Exception as e:
            st.error(f"Erro ao processar arquivo: {str(e)}")

def aba_visualizacao():
    """Visualiza√ß√£o e manipula√ß√£o de dados"""
    st.header("üìä Visualiza√ß√£o de Dados")
    
    df = carregar_vendas()
    if df.empty:
        st.warning("Nenhum dado encontrado no banco")
        return
    
    # Filtros
    st.subheader("Filtros")
    col1, col2 = st.columns(2)
    
    with col1:
        produtos = st.multiselect(
            "Selecione produtos",
            options=df['Produto'].unique(),
            default=df['Produto'].unique()[:2] if len(df['Produto'].unique()) > 0 else []
        )
    
    with col2:
        if 'Data' in df.columns:
            date_range = st.date_input(
                "Per√≠odo",
                value=[df['Data'].min(), df['Data'].max()]
            )
    
    # Aplicar filtros
    filtered_df = df.copy()
    if produtos:
        filtered_df = filtered_df[filtered_df['Produto'].isin(produtos)]
    if 'Data' in df.columns:
        filtered_df = filtered_df[filtered_df['Data'].between(*date_range)]
    
    # Visualiza√ß√£o
    st.dataframe(filtered_df.sort_values('Data' if 'Data' in df.columns else 'Produto', ascending=False))
    
    # Gr√°ficos
    st.subheader("An√°lise de Vendas")
    tab1, tab2 = st.tabs(["Por Produto", "Temporal"])
    
    with tab1:
        if not filtered_df.empty:
            fig = px.bar(
                filtered_df.groupby('Produto')['Pre√ßo Total'].sum().reset_index(),
                x='Produto',
                y='Pre√ßo Total',
                title="Vendas por Produto"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        if 'Data' in filtered_df.columns and not filtered_df.empty:
            fig = px.line(
                filtered_df.groupby('Data')['Pre√ßo Total'].sum().reset_index(),
                x='Data',
                y='Pre√ßo Total',
                title="Vendas ao Longo do Tempo"
            )
            st.plotly_chart(fig, use_container_width=True)

def aba_clientes():
    """Gest√£o de clientes com an√°lise de gastos"""
    st.header("üë• Gest√£o de Clientes")
    
    df = carregar_clientes()
    if df.empty:
        st.warning("Nenhum dado de cliente encontrado")
        return
    
    # Renomear colunas
    df = df.rename(columns={
        "_id": "Cliente",
        "TotalGasto": "Total Gasto (R$)",
        "QuantidadeCompras": "Qtd. Compras"
    })
    
    # Filtros
    st.subheader("Filtros")
    cidades = st.multiselect(
        "Selecione cidades",
        options=df['Cidade'].unique(),
        default=df['Cidade'].unique()[:2] if len(df['Cidade'].unique()) > 0 else []
    )
    
    # Aplicar filtros
    filtered_df = df[df['Cidade'].isin(cidades)] if cidades else df
    
    # Visualiza√ß√£o
    st.dataframe(
        filtered_df.sort_values("Total Gasto (R$)", ascending=False),
        column_config={
            "Total Gasto (R$)": st.column_config.NumberColumn(format="R$ %.2f")
        }
    )
    
    # M√©tricas
    st.subheader("M√©tricas")
    col1, col2, col3 = st.columns(3)
    col1.metric("Clientes", len(filtered_df))
    col2.metric("Gasto M√©dio", f"R$ {filtered_df['Total Gasto (R$)'].mean():.2f}" if not filtered_df.empty else "R$ 0.00")
    col3.metric("Compras M√©dia", f"{filtered_df['Qtd. Compras'].mean():.1f}" if not filtered_df.empty else "0")

def aba_logistica():
    """Otimiza√ß√£o log√≠stica com mapa de vendas"""
    st.header("üöö Otimiza√ß√£o Log√≠stica")
    
    df = carregar_vendas()
    if df.empty:
        st.warning("Nenhum dado encontrado para an√°lise")
        return
    
    # Dicion√°rio de coordenadas (latitude, longitude)
    coordenadas = {
        "S√£o Paulo": (-23.5505, -46.6333),
        "Rio de Janeiro": (-22.9068, -43.1729),
        "Belo Horizonte": (-19.9167, -43.9345),
        "Porto Alegre": (-30.0346, -51.2177),
        "Curitiba": (-25.4296, -49.2717),
        "Salvador": (-12.9714, -38.5014),
        "Recife": (-8.0476, -34.8770),
        "Fortaleza": (-3.7319, -38.5267),
        "Manaus": (-3.1190, -60.0217),
        "Goi√¢nia": (-16.6869, -49.2648)
    }
    
    # Processar dados
    vendas_por_cidade = df.groupby('Cidade').agg({
        'Pre√ßo Total': 'sum',
        'Quantidade': 'sum',
        'Produto': 'count'
    }).reset_index()
    
    # Adicionar coordenadas de forma segura
    vendas_por_cidade['lat'] = vendas_por_cidade['Cidade'].apply(
        lambda x: coordenadas.get(x, (0, 0))[0]
    )
    vendas_por_cidade['lon'] = vendas_por_cidade['Cidade'].apply(
        lambda x: coordenadas.get(x, (0, 0))[1]
    )
    
    # Mapa interativo
    st.pydeck_chart(
        pdk.Deck(
            map_style='mapbox://styles/mapbox/light-v9',
            initial_view_state=pdk.ViewState(
                latitude=-15,
                longitude=-55,
                zoom=3,
                pitch=50,
            ),
            layers=[
                pdk.Layer(
                    'ScatterplotLayer',
                    data=vendas_por_cidade,
                    get_position='[lon, lat]',
                    get_color='[200, 30, 0, 160]',
                    get_radius='Pre√ßo Total / 1000',
                    pickable=True
                ),
            ],
            tooltip={
                "html": "<b>Cidade:</b> {Cidade}<br><b>Vendas:</b> R$ {Pre√ßo Total:,.2f}",
                "style": {
                    "backgroundColor": "steelblue",
                    "color": "white"
                }
            }
        )
    )
    
    # Tabela detalhada
    st.subheader("Detalhes por Munic√≠pio")
    st.dataframe(
        vendas_por_cidade.sort_values('Pre√ßo Total', ascending=False),
        column_config={
            "Pre√ßo Total": st.column_config.NumberColumn(
                "Total Vendido",
                format="R$ %.2f",
                width="medium"
            ),
            "Quantidade": st.column_config.NumberColumn(
                "Qtd. Itens",
                format="%.0f",
                width="small"
            ),
            "Produto": st.column_config.NumberColumn(
                "Qtd. Vendas",
                format="%.0f",
                width="small"
            ),
            "Cidade": "Munic√≠pio"
        },
        hide_index=True,
        use_container_width=True
    )

# =============================================
# INTERFACE PRINCIPAL
# =============================================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="E-Shop Analytics",
    page_icon="üìä",
    layout="wide"
)

# Verifica√ß√£o de login
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    login_page()
    st.stop()

# Menu lateral
with st.sidebar:
    st.image("https://via.placeholder.com/150x50?text=E-Shop", width=150)
    st.markdown("## Navega√ß√£o")
    
    opcoes_menu = [
        "Dashboard",
        "Upload de Arquivos",
        "Visualiza√ß√£o de Dados",
        "Gest√£o de Clientes",
        "Otimiza√ß√£o Log√≠stica"
    ]
    
    aba_selecionada = st.selectbox(
        "Selecione a op√ß√£o",
        opcoes_menu,
        key="menu_principal"
    )
    
    st.markdown("---")
    if st.button("üîí Sair", key="logout_btn"):
        st.session_state.clear()
        st.rerun()

# Conte√∫do principal
if aba_selecionada == "Dashboard":
    st.title("üìä Dashboard Principal")
    st.write("Bem-vindo ao painel de controle E-Shop Brasil")
    
    # M√©tricas r√°pidas
    try:
        df_vendas = carregar_vendas()
        df_clientes = carregar_clientes()
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Vendas", 
                   f"R$ {df_vendas['Pre√ßo Total'].sum():,.2f}" if not df_vendas.empty else "R$ 0.00")
        col2.metric("Clientes Ativos", 
                   len(df_clientes) if not df_clientes.empty else 0)
        col3.metric("Produtos Vendidos", 
                   df_vendas['Produto'].nunique() if not df_vendas.empty else 0)
        
        # Gr√°fico r√°pido
        if not df_vendas.empty and 'Data' in df_vendas.columns:
            st.subheader("Vendas Recentes")
            fig = px.line(
                df_vendas.groupby('Data')['Pre√ßo Total'].sum().reset_index().tail(30),
                x='Data',
                y='Pre√ßo Total',
                title="√öltimos 30 dias"
            )
            st.plotly_chart(fig, use_container_width=True)
            
    except Exception as e:
        st.error(f"Erro ao carregar dados do dashboard: {str(e)}")
    
elif aba_selecionada == "Upload de Arquivos":
    aba_upload()
    
elif aba_selecionada == "Visualiza√ß√£o de Dados":
    aba_visualizacao()
    
elif aba_selecionada == "Gest√£o de Clientes":
    aba_clientes()
    
elif aba_selecionada == "Otimiza√ß√£o Log√≠stica":
    aba_logistica()
